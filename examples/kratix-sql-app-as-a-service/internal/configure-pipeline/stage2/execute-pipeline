#!/usr/bin/env sh

set -eux

export name="$(yq eval '.metadata.name' /kratix/input/object.yaml)"
export env="$(yq eval '.spec.env' /kratix/input/object.yaml)"
export replicas="$(yq eval '.spec.replicas' /kratix/input/object.yaml)"
export image="$(yq eval '.spec.image' /kratix/input/object.yaml)"

function eventually {
  # 10 minutes
	for i in $(seq 1 120); do $@ && return || sleep 5; done
	exit 1
}

set +e
eventually kubectl get secret $name
set -e

kubectl get secret $name -o yaml > /kratix/output/secret.yaml
yq -i eval 'del(.metadata.creationTimestamp)' /kratix/output/secret.yaml
yq -i eval 'del(.metadata.uid)' /kratix/output/secret.yaml
yq -i eval 'del(.metadata.resourceVersion)' /kratix/output/secret.yaml



cat << EOF > /kratix/output/app.yaml
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: $name
  name: $name
spec:
  replicas: $replicas
  selector:
    matchLabels:
      app.kubernetes.io/name: $name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: $name
    spec:
      containers:
      - env:
        - name: DB_ENDPOINT
          valueFrom:
            secretKeyRef:
              key: endpoint
              name: $name
        - name: DB_PORT
          valueFrom:
            secretKeyRef:
              key: port
              name: $name
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: $name
        - name: DB_PASS
          valueFrom:
            secretKeyRef:
              key: password
              name: $name
        - name: DB_NAME
          value: $name
        image: $image
        livenessProbe:
          httpGet:
            path: /
            port: 8080
        name: $name
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /
            port: 8080
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app.kubernetes.io/name: $name
  name: $name
spec:
  ingressClassName: traefik
  rules:
  - host: $name.127.0.0.1.nip.io
    http:
      paths:
      - backend:
          service:
            name: $name
            port:
              number: 8080
        path: /
        pathType: ImplementationSpecific
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: $name
  name: $name
spec:
  ports:
  - name: http
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app.kubernetes.io/name: $name
  type: ClusterIP
EOF

echo """
- matchLabels:
    environment: $env
""" >> /kratix/metadata/destination-selectors.yaml
